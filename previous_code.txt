this code created a box and then labeled it with the below text
from tkinter import *
root = Tk()

my_label = Label(root, text = 'Hello World')

my_label.pack()

root.mainloop() 

////////////////////

this code creates a 500x500 pixel initial box (adjustable) with an icon (apple.ico)
and two lines of text each listed with the Label().pack() command
root.mainloop() runs the box

from tkinter import * 
root = Tk()

root.title('My Box Gui')
root.iconbitmap('apple.ico')
root.geometry("500x500")

my_label = Label(root, text = "hello").pack()
my_label2 = Label(root, text = "how are you doing?").pack()

root.mainloop()

////////////////////

this code specifies the gui box to display the labels on a grid within the box
this also opens the code in the 500x500 pixel size
.grid() also seems to remove the need for a .pack() command


from tkinter import * 
root = Tk()

root.title('my gui app')
root.iconbitmap('star.ico')
root.geometry("500x500")

my_label = Label(root, text='my new gui app').grid(row=0, column=0)
my_label2 = Label(root, text='this is line 2').grid(row=1, column=0)

#my_label.grid(row=0, column = 1)
#my_label2.grid(row=0, column = 2)

root.mainloop()

////////////////////

from tkinter import *
root = Tk()

root.title('My Button')
root.iconbitmap('apple.ico')
root.geometry('500x500')


#now when the button is clicked this label will display
#the .pack() command will display the label beneath the button while the 
#.grid() command will not work as the button already controls the geometry
# it results in this error 'cannot use geometry manager grid inside . which already has slaves managed by pack'
def my_click():
    my_label = Label(root, text='welcome to the app', fg='#3371FF').pack()

my_button = Button(root, text='click this button', command=my_click, fg='black', bg='#33FFCA', padx=30, pady=30)
my_button.pack() #the button wont do anything eithout the command argument
#fg and bg args are the foreground and background colors, they accept hex and colors, padx, pady arg is padding and takes and int variable

root.mainloop()

////////////////////

from tkinter import *
root = Tk()

root.title('my entry box')
root.iconbitmap('apple.ico')
root.geometry('500x500')

#entry is an entry box that operated within root
#if you try to do a one liner here, you set e to the result of the .pack() command
#this in turn makes it so that you cannot access the internal portions of the entry
e = Entry(root, width=50, fg='black')
e.grid(row=0, column=1)
#you can say .pack(), but .grid will alow you to organize where the textbox appears
#grid also prevents the screen from filling with the result

ee = Entry(root, width=30, fg="black")
ee.grid(row=0, column=2)
def my_click():
    my_label = Label(root, text='hello ' + e.get()).grid(row=3, column=1)
    #the above grabs the text from the entry and displays it
    e.delete(0, END)

def my_click2():
    my_label2 = Label(root, text='hello ' + ee.get()).grid(row=3, column=2)
    ee.delete(0, END)

my_button = Button(root, text='Enter your first name', padx=10, pady=10, bg='white', fg='green', command=my_click)
my_button.grid(row=2, column=1)

my_button2 = Button(root, text='Enter your last name', padx=10, pady=10, bg='white', fg='green', command=my_click2)
my_button2.grid(row=2, column=2)


#because there is a pack() command we cant use grid, so we have to adjust the pack to grid

root.mainloop()

////////////////////

from tkinter import *
root = Tk()

root.title('my Radio Button App')
root.iconbitmap('star.ico')
root.geometry('500x500')

q = IntVar()
q.get()
q.set('2')
#q gets initialized as 0 and displayed if we do not set it, anyway

def my_click(value):
    my_label = Label(root, text = value)
    my_label.pack()

Radiobutton(root, text='1', variable=q , value=1).pack(anchor='w')
Radiobutton(root, text='2', variable=q, value=2).pack(anchor='w')
Radiobutton(root, text='3', variable=q , value=3).pack(anchor='w')
Radiobutton(root, text='4', variable=q , value=4).pack(anchor='w')

my_label = Label(root, text= q.get())
my_label.pack()

my_button = Button(root, text='Submit', command=lambda:my_click(q.get()))
my_button.pack()
#the lambda expression allows us to pass the value obtained from the radio button to the function my_click()



root.mainloop()

////////////////////

the below code creates a radio button set based on the touple PRODUCT, and allows them to be selected

from tkinter import *
root = Tk()

root.title('my RBMenu app')
root.iconbitmap('apple.ico')
root.geometry('400x400')

PRODUCT = [

    ('Microsoft Surface','Microsoft Surface'),
    ('Google Pixel', 'Google Pixel'),
    ('Asus ROG', 'Asus ROG'),
    ('Macbook Pro', 'Macbook Pro'),
    ('HP OMEN', 'HP OMEN'),
    ('Apple iPhone SE2', 'Apple iPhone SE2'),
    ('BOSE q3 Headphones', 'BOSE q3 Headphones')

]

choice = StringVar()
choice.set('Microsoft Surface')

for text,mode in PRODUCT:
    Radiobutton(root, text=text, variable=choice, value=mode).pack(anchor='w')

def my_click(value):
    my_label = Label(root, text=value)
    my_label.pack()
    
my_button = Button(root, text='buy now', command=lambda:my_click(choice.get()))
my_button.pack()

root.mainloop()

////////////////////

below code creates a selection box with items options that are printed in a specific part of the box

from tkinter import *
root = Tk()

root.title('Option app')
root.iconbitmap('apple.ico')
root.geometry('400x400')

def open():
    my_label = Label(root, text=clicked.get())
    my_label.grid(row=2,column=2,ipadx=30,pady=10)

options = [
    'iPhone XR',
    'iPhone SE',
    'iPhone X',
    'iPhone X Max',
    'Google Pixel',
]

clicked = StringVar()
clicked.set(options[0])

drop = OptionMenu(root,clicked,*options)
drop.grid(row=0,column=1,padx=10,pady=10)

my_button = Button(root, text='Submit', command=open)
my_button.grid(row=0,column=2,padx=10,pady=10)

root.mainloop()

////////////////////

below code initializes a frame and then places the buttons inside the frame

from tkinter import *
root=Tk()

root.title('frame GUI app')
root.iconbitmap('apple.ico')
root.geometry('800x800')

frame = LabelFrame(root, text='frame widget', padx=100, pady=100)
frame.grid(padx=20, pady=20)

def my_click():
    label1 = Label(frame,text='hello user',fg='blue')
    label1.grid(row=10,column=10)

b1 = Button(frame,text='click', command=my_click) #f you put my_click() instead of my_click, the button will execute the function on init
b1.grid(row=0,column=1)

c = Button(frame,text='exit', command=root.quit)
c.grid(row=0,column=3)

root.mainloop()

////////////////////

the below code inits two sliders with different orientations and then displays their current value on a button click

from tkinter import *
root = Tk()

root.title('slider gui app')
root.iconbitmap('apple.ico')
root.geometry('500x500')

vertical_slider = Scale(root,from_=250,to=0,orient=VERTICAL)
vertical_slider.pack(anchor='w')

horizontal_slider = Scale(root,from_=0,to=250,orient=HORIZONTAL)
horizontal_slider.pack(anchor='w')

def slider():
    l1 = Label(root, text='vert label').pack()
    vert_label = Label(root, text=vertical_slider.get()).pack()
    l2 = Label(root, text='hori label ').pack()
    hori_label = Label(root, text=horizontal_slider.get()).pack()

vert_button = Button(root, text='click vert', command=slider)
vert_button.pack()

root.mainloop()

////////////////////

the below code sets up a series of sliders and then displays their values on button clicks

from tkinter import *
root = Tk()

root.title('DJ App')
root.iconbitmap('apple.ico')
root.geometry('500x500')

vslider1 = Scale(root, from_=300, to=0, orient=VERTICAL)
vslider1.grid(row=0,column=0)

vslider2 = Scale(root, from_=300, to=0, orient=VERTICAL)
vslider2.grid(row=0,column=1)

vslider3 = Scale(root, from_=300, to=0, orient=VERTICAL)
vslider3.grid(row=0,column=2)

vslider4 = Scale(root, from_=300, to=0, orient=VERTICAL)
vslider4.grid(row=0,column=3)

vslider5 = Scale(root, from_=300, to=0, orient=VERTICAL)
vslider5.grid(row=0,column=4)

def value():
    vlabel1=Label(root, text=vslider1.get()).grid(row=0,column=5)
    vlabel2=Label(root, text=vslider2.get()).grid(row=0,column=6)
    vlabel3=Label(root, text=vslider3.get()).grid(row=0,column=7)
    vlabel4=Label(root, text=vslider4.get()).grid(row=0,column=8)
    vlabel5=Label(root, text=vslider5.get()).grid(row=0,column=9)

vbutton = Button(root,text='values',command=value).grid(row=1, column=0)

root.mainloop()

////////////////////

the below initialized a single unchecked box and then displays the value of that box (checked or unchecked) on a button click

from tkinter import *
root = Tk()

root.title('check box app')
root.iconbitmap('apple.ico')
root.geometry('500x500')

a = StringVar() #this is the value that we initialize to hold the on/off value from the checkbox

c = Checkbutton(root, text='python', variable=a, onvalue='OK', offvalue='NO')
c.deselect() #this starts the check button unchecked
c.pack()

def click():
    my_label = Label(root,text=a.get()).pack()

b1 = Button(root, text='show value', command=click)
b1.pack()

root.mainloop()

////////////////////

below code opens an intial window and upon a button click, opens a new window
the button in the new window subsequently closes the entire application

from tkinter import *
root = Tk()

root.title('new window app')
root.iconbitmap('apple.ico')
root.geometry('500x500')

def click():
    new = Toplevel()
    new.title('new window')
    new.iconbitmap('star.ico')
    new.geometry('400x400')

    label = Label(new, text='opened a new window')
    label.pack()

    b2 = Button(new, text='exit', command=new.quit) #this closes the new window and the old window
    b2.pack()

b1 = Button(root, text='open a new window', command=click)
b1.pack()

mainloop()

#mainloop() and root.mainloop() seem to operate the same way

////////////////////

the below code initializes each kind of messagebox
they are dependent on importing the messagebox lib from tkinter

from tkinter import *
from tkinter import messagebox
root = Tk()

root.title('Message Button App')
root.iconbitmap('apple.ico')
root.geometry('500x500')

def popup():
    messagebox.showinfo('this is a message popup box','hello this is the content of the messagebox') #this is the title of the popup box
#the content sizing is determined by the content size, no need for geometric resizing

def popup2():
    messagebox.showerror('error window', 'you messed up, friend')

def popup3():
    messagebox.askokcancel('ok/cancel window', 'Continue?')

def popup4():
    messagebox.askquestion('question window', 'do you want to build a snowman?')

def popup5():
    messagebox.askyesno('yes/no window', 'am i the fairest of them all?')

b1 = Button(root, text='popup1', command=popup)
b1.pack()

b2 = Button(root, text='popup2', command=popup2)
b2.pack()

b3 = Button(root, text='popup3', command=popup3)
b3.pack()

b4 = Button(root, text='popup4', command=popup4)
b4.pack()

b5 = Button(root, text='popup5', command=popup5)
b5.pack()

root.mainloop()

////////////////////

the below code opens the file explorer
the PIL library does not seem to be in pylance and wasnt installable with pip
i could be missing something or it could be the permissions that i have set up

from tkinter import *
from tkinter import filedialog #this import allows for the filebrowser functionality
#from PIL import Image,ImageTK
root = Tk()

root.title('Open Files App')
root.iconbitmap('apple.ico')
root.geometry('500x500')

def click():
    root.filename = filedialog.askopenfilename(initialdir='C:\'', title='Select File',filetypes=(('jpg files', '*.jpg'), ('all files', '*.*')))

b1 = Button(root, text='open file', command=click)
b1.pack()

my_label = Label(root, text='All Done')
my_label.pack()

root.mainloop()

////////////////////

this code will display an image with the image.open command and then exit the app via button

from tkinter import *
from PIL import Image,ImageTk #apparently the PIL library can be reached by pip install Pillow LOL
root = Tk()

root.title('Photo app')
root.iconbitmap('apple.ico')
root.geometry('500x500')

img1 = ImageTk.PhotoImage(Image.open('[your image to open]'))
label = Label(root, image= img1)
label.pack()

def quit_file():
    root.quit()

qbutton = Button(root, text='Exit Image', command=quit_file)
qbutton.pack()

root.mainloop()

////////////////////

the below code intiialized an app that takes a users name as input and greets them in different fonts
it also allows for a different background color than the stock white

from tkinter import *

root = Tk()

root.title('Resize Entry App')
root.iconbitmap('star.ico')
root.geometry('500x500')
root.configure(background='gray')

def clicked():
    hi_user = 'hello ' + e.get()
    l1 = Label(root, text=hi_user, font=('Arial', 20))
    l1.pack(padx=10,pady=10)

e = Entry(root, width=40, font=('Arial', 40))
e.pack(padx=10, pady=10)

b1 = Button(root, text='Click User', command=clicked)
b1.pack(padx=20, pady=20)

root.mainloop()

////////////////////

